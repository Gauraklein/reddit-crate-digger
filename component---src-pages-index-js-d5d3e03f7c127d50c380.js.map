{"version":3,"sources":["webpack:///./node_modules/redux-thunk/es/index.js","webpack:///./src/components/Searchbar/searchbarReducer.js","webpack:///./src/components/Crate/crateReducer.js","webpack:///./src/redux/rootReducer.js","webpack:///./src/pages/index.js"],"names":["createThunkMiddleware","extraArgument","_ref","dispatch","getState","next","action","thunk","withExtraArgument","initialState","searchQuery","crate","data","title","url","crateIndex","reducers","searchbar","state","type","console","log","payload","length","reducer","combineReducers","store","createStore","applyMiddleware","Index","Home"],"mappings":"+JAAA,SAASA,EAAsBC,GAC7B,OAAO,SAAUC,GACf,IAAIC,EAAWD,EAAKC,SAChBC,EAAWF,EAAKE,SACpB,OAAO,SAAUC,GACf,OAAO,SAAUC,GACf,MAAsB,mBAAXA,EACFA,EAAOH,EAAUC,EAAUH,GAG7BI,EAAKC,MAMpB,IAAIC,EAAQP,IACZO,EAAMC,kBAAoBR,EACX,QCjBTS,EAAe,CACjBC,YAAa,ICFXD,EAAe,CACjBE,MAAO,CAAC,CAACC,KAAM,CACXC,MAAO,cACPC,IAAK,iDAETC,WAAY,GCFHC,EAAW,CACtBC,UFC8B,SAACC,EAAsBZ,GAEnD,YAF8D,IAAjCY,MAAQT,GAE7BH,EAAOa,MAEX,IAAK,sBAEL,OADAC,QAAQC,IAAIf,EAAOgB,QAAS,mCACrB,OAAP,UACOJ,EADP,CAEIR,YAAaJ,EAAOgB,UAUxB,QACE,OAAOJ,IEnBfP,MDG0B,SAACO,EAAsBZ,GAE/C,YAF0D,IAAjCY,MAAQT,GAEzBH,EAAOa,MAEX,IAAK,eAEL,OADAC,QAAQC,IAAIf,EAAOgB,QAAS,uCACrB,OAAP,UACOJ,EADP,CAEIP,MAAOL,EAAOgB,UAIlB,IAAK,uBAEL,OADAF,QAAQC,IAAIf,EAAOgB,QAAS,qCACrB,OAAP,UACOJ,EADP,CAEIH,WAAYT,EAAOgB,UAGvB,IAAK,wBAKL,OAJAF,QAAQC,IAAI,2BAA4Bf,EAAOgB,SAC3ChB,EAAOgB,SAAWJ,EAAMH,WAAWQ,SACnCjB,EAAOgB,QAAU,GAEd,OAAP,UACOJ,EADP,CAEIH,WAAYT,EAAOgB,UAGvB,IAAK,wBAML,OALAF,QAAQC,IAAI,2BAA4Bf,EAAOgB,SAC3ChB,EAAOgB,QAAU,IACjBhB,EAAOgB,QAAUJ,EAAMP,MAAMY,OAAS,GAE1CH,QAAQC,IAAI,6BAA8Bf,EAAOgB,QAASJ,EAAMP,OACzD,OAAP,UACOO,EADP,CAEIH,WAAYT,EAAOgB,UAGvB,QACE,OAAOJ,KE1CXM,EAAUC,YAAgBT,GAE1BU,EAAQC,YAAYH,EAASI,YAAgBrB,IAUpCsB,UARD,WACZ,OACE,kBAAC,IAAD,CAAUH,MAAOA,GACjB,kBAACI,EAAA,QAAD","file":"component---src-pages-index-js-d5d3e03f7c127d50c380.js","sourcesContent":["function createThunkMiddleware(extraArgument) {\n  return function (_ref) {\n    var dispatch = _ref.dispatch,\n        getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        if (typeof action === 'function') {\n          return action(dispatch, getState, extraArgument);\n        }\n\n        return next(action);\n      };\n    };\n  };\n}\n\nvar thunk = createThunkMiddleware();\nthunk.withExtraArgument = createThunkMiddleware;\nexport default thunk;","\nconst initialState = {\n    searchQuery: \"\"\n}\n\nexport const searchbarReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case \"UPDATE_SEARCH_VALUE\": \n        console.log(action.payload, \"this should be the search value\")\n        return {\n            ...state,\n            searchQuery: action.payload\n        }\n\n        // case \"UPDATE_CRATE\":\n        // console.log(action.payload, \"this is what's going into the crate\")\n        // return {\n        //     ...state,\n        //     crate: action.payload\n        // }\n\n        default:\n          return state\n      }\n}","const initialState = {\n    crate: [{data: {\n        title: \"lofiii baby\",\n        url: \"https://www.youtube.com/watch?v=5qap5aO4i9A\"\n    }}],\n    crateIndex: 0\n}\n\nexport const crateReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case \"UPDATE_CRATE\":\n        console.log(action.payload, \"this is what's going into the crate\")\n        return {\n            ...state,\n            crate: action.payload \n            // need to come up with a way to add to the crate without resetting it\n        }\n\n        case \"SET_NEW_RECORD_INDEX\":\n        console.log(action.payload, \"this is the new crate Index value\")\n        return {\n            ...state,\n            crateIndex: action.payload\n        }\n\n        case \"INCREMENT_CRATE_INDEX\": \n        console.log(\"incrementing crate index\", action.payload)\n        if (action.payload >= state.crateIndex.length) {\n            action.payload = 0\n        }\n        return {\n            ...state,\n            crateIndex: action.payload\n        }\n\n        case \"DECREMENT_CRATE_INDEX\": \n        console.log(\"decrementing crate index\", action.payload)\n        if (action.payload < 0) {\n            action.payload = state.crate.length - 1\n        }\n        console.log(\"this is the action.payload\", action.payload, state.crate)\n        return {\n            ...state,\n            crateIndex: action.payload\n        }\n\n        default:\n          return state\n      }\n}","import { searchbarReducer } from \"../components/Searchbar/searchbarReducer\"\nimport { crateReducer } from \"../components/Crate/crateReducer\"\n\nexport const reducers = {\n  searchbar: searchbarReducer,\n  crate: crateReducer\n}","import React from \"react\"\nimport Home from \"./Home\"\nimport { Provider } from \"react-redux\"\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {reducers} from \"../redux/rootReducer\"\n\nconst reducer = combineReducers(reducers);\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nconst Index = () => {\n  return (\n    <Provider store={store}>\n    <Home />\n    </Provider>\n  )\n}\n\nexport default Index\n"],"sourceRoot":""}